#
# Test that option wsrep_ignore_apply_errors does not kick in on
# operations where it should not, e.g. UPDATE
# 

--source include/galera_cluster.inc
--source include/big_test.inc

--connection node_2
SET GLOBAL wsrep_ignore_apply_errors = 2;

--connection node_1
CREATE TABLE t1 (f1 INTEGER PRIMARY KEY) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1),(2),(3);

--connection node_2
--let $wait_condition = SELECT COUNT(*) = 3 FROM t1;
--source include/wait_condition.inc

# Create an inconsistency
SET SESSION wsrep_on = OFF;
DELETE FROM t1 WHERE f1 = 2;

--connection node_1
UPDATE t1 SET f1 = 4 WHERE f1 = 2;

# Error on UPDATE is not skipped, node #2 goes non-Prim
--connection node_2
--let $wait_condition = SELECT VARIABLE_VALUE = 'Disconnected' FROM performance_schema.global_status WHERE VARIABLE_NAME = 'wsrep_cluster_status';
--source include/wait_condition.inc

# Restore cluster via SST to keep MTR happy
--source include/kill_galera.inc
--sleep 1
--echo Starting mysqld
--source include/start_mysqld.inc

--connection node_1
--let $wait_condition = SELECT VARIABLE_VALUE = 3 FROM performance_schema.global_status WHERE VARIABLE_NAME = 'wsrep_cluster_size';
--source include/wait_condition.inc

DROP TABLE t1;

--connection node_2
--enable_reconnect
CALL mtr.add_suppression("Replication can't continue due to the error in a writeset apply operation:");
CALL mtr.add_suppression("Slave SQL: Could not execute Update_rows event on table");
CALL mtr.add_suppression("Update_rows apply failed");
CALL mtr.add_suppression("Inconsistent by consensus");
CALL mtr.add_suppression("Failed to apply");
CALL mtr.add_suppression("Node consistency compromized");
